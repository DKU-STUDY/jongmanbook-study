//키가 같은 경우?
#include <iostream>
#include <vector>
typedef int KeyType;

using namespace std;

struct Node {
	KeyType key;
	int priority, size;
	Node *left, *right;
	Node(const KeyType& _key) : key(_key), priority(rand()), left(NULL), right(NULL) {};

	void setLeft(Node* newLeft) { left = newLeft; calcSize(); };
	void setRight(Node* newRight) { right = newRight; calcSize(); };
	void calcSize() {
		int size = 1;
		if (left) size += left->size;
		if (right) size += right->size;
	}
};

typedef pair<Node*, Node*> NodePair;

//쪼개는 연산. 삽입하려면 쪼개야한다.
//root 트리를 key를 기준으로 두개로 쪼갠다.
NodePair split(Node* root, KeyType key) {
	//root가 쪼갤것이 없으면(null) 쪼갠것이 없는 상태를 반환한다.
	if (root == NULL) return NodePair(NULL, NULL);

	//root가 쪼갤것이 있다.
	NodePair res;
	//root의 키가 key보다 작다.
	//root포함 왼쪽(key보다 확실히 작다) + 오른쪽(모른다.)
	if (root->key < key) {
		//오른쪽이 모르는 상태이므로 쪼갠다.
		NodePair rs = split(root->right, key);
		root->setRight(rs.first);
		return NodePair(root, rs.second);
	}
	//root포함 오른쪽 + 왼쪽
	//root의 키가 key보다 크다
	//root의 왼쪽(key보다 작을지 클지 모른다) +  root포함 오른쪽 (key보다 확실히 크다)
	NodePair ls = split(root->left, key);
	root->setLeft(ls.second);
	return NodePair(ls.first, root);
}

//해당 root에 node를 삽입후 결과를 반환한다.
Node* insert(Node* root, Node* node) {
	if (root == NULL) return node;
//루트의 우선순위가 노드보다 큰 경우
//노드가 루트를 대체한다.
//루트를 두개로 쪼개서 노드에 병합한다.
	if (root->priority < node->priority) {
		//노드 키를 기준으로 두개로 쪼갠다.
		NodePair rsp = split(root, node->key);
		node->setLeft(rsp.first);
		node->setRight(rsp.second);
		return node;
	}
//루트의 우선순위가 노드보다 작은 경우
	//루트의 키가 노드의 키보다 클 경우
	if (root->key > node->key)
		root->setLeft(insert(root->left, node));
	else
		root->setRight(insert(root->right, node));
	return root;
}

//두개의 노드를 합친다.
//합친 노드를 반환한다.
//max(a) < min(b) -> erase연산에서 사용된것.
Node* merge(Node* a, Node* b) {
	if (a == NULL) return b;
	if (b == NULL) return a;
	//a가 priority가 높다.
	//a가 부모가 된다.
	if (a->priority > b->priority) {
		//a의 왼쪽은 유지한다.
		//a의 오른쪽과 b를 합병한다.
		a->setRight(merge(a->right, b));
		return a;
	}
	//b가 priority가 높다.
	//b가 부모가 된다.
	//b의 오른쪽은 유지한다.
	b->setLeft(merge(a, b->left));
	return b;
}

//해당 키의 노드를 지우고 병합한다. 그후 노드를 반환한다.
Node* erase(Node* root, KeyType key) {
	if (root == NULL) return root;
	//키가 루트인경우
	if (root->key == key) {
		Node* res = merge(root->left, root->right);
		delete root;
		return res;
	}

	//키가 왼쪽에 있는 경우.
	if (root->key > key)
		root->setLeft(erase(root->left, key));
	//키가 오른쪽에 있는 경우
	else
		root->setRight(erase(root->right, key));
	return root;
}

//root에서 k번째 원소를 찾는다.
Node* kth(Node* root, int k) {
	int leftSize = 0;
	if (root->left != NULL) leftSize = root->left->size;
	//해당 번째 원소.
	if (leftSize + 1 == k)
		return root;
	//왼쪽에 있는 경우
	if (leftSize <= k)
		return kth(root->left, k);
	//오른쪽에 있는 경우. 왼쪽을 포함하게 되면, 전체의 트리중 몇번째를 구하는것이다.
	//따라서 오른쪽 트리의 몇번째인지를 구하려면 루트포함 왼쪽 크기를 제거해야한다.
	return kth(root->right, k - leftSize - 1);
}

//root 트리에서 key보다 작은 원소가 몇개 있는지 반환한다.
int countLessThan(Node* root, KeyType key) {
	if (root == NULL) return 0;
	//찾고자하는 키보다 root key가 같거나 작은 경우
	if (root->key < key) {
		int leftSize = root->left ? root->left->size : 0;
		return leftSize + 1 + countLessThan(root->right, key);
	}
	//찾고자하는 키보다 root key가 큰 경우
	else
		return countLessThan(root->left, key);
}

int main() {

}